
% Foundations {{{

%% Kleene Algebra {{{

@techreport{tka,
  title={Typed {K}leene algebra},
  author={Kozen, Dexter},
  year={1998},
  institution={Cornell University}
}

@inproceedings{pom,
  title={Partially ordered monads and powerset Kleene algebras},
  author={Eklund, Patrik and G{\"a}hler, Werner},
  booktitle={Proc. 10th Information Processing and Management of
    Uncertainty in Knowledge Based Systems Conference (IPMU 2004)},
  volume={3},
  pages={18651869},
  year={2004},
  organization={Citeseer}
}

@inproceedings{kleenem,
  title={Kleene monads: handling iteration in a framework of generic effects},
  author={Goncharov, Sergey and Schr{\"o}der, Lutz and Mossakowski, Till},
  booktitle={International Conference on
    Algebra and Coalgebra in Computer Science},
  pages={18--33},
  year={2009},
  organization={Springer}
}

@inproceedings{failkat,
  title={Equational Theories of Abnormal Termination Based on Kleene Algebra},
  author={Mamouras, Konstantinos},
  booktitle={International Conference on
    Foundations of Software Science and Computation Structures},
  pages={88--105},
  year={2017},
  organization={Springer}
}

%}}}

%% Abstract Interpretation {{{

@inproceedings{absint,
  title={Abstract interpretation: a unified lattice model for static
    analysis of programs by construction or approximation of fixpoints},
  author={Cousot, Patrick and Cousot, Radhia},
  booktitle={Proceedings of the 4th ACM SIGACT-SIGPLAN symposium on
    Principles of programming languages},
  pages={238--252},
  year={1977},
  organization={ACM}
}

@article{aif,
  title={Abstract interpretation frameworks},
  author={Cousot, Patrick and Cousot, Radhia},
  journal={Journal of logic and computation},
  volume={2},
  number={4},
  pages={511--547},
  year={1992},
  publisher={Oxford University Press}
}

@inproceedings{aigp,
  title={Abstract interpretation of game properties},
  author={Henzinger, Thomas A and Majumdar, Rupak and Mang, Freddy and
    Raskin, Jean-Fran{\c{c}}ois},
  booktitle={International Static Analysis Symposium},
  pages={220--239},
  year={2000},
  organization={Springer}
}

%%}}}

@inproceedings{pts,
  author = {Hutchins, DeLesley S.},
  title = {Pure Subtype Systems},
  booktitle = {Proceedings of the 37th Annual ACM SIGPLAN-SIGACT Symposium on
    Principles of Programming Languages},
  series = {POPL'10},
  year = {2010},
  isbn = {978-1-60558-479-9},
  location = {Madrid, Spain},
  pages = {287--298},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/1706299.1706334},
  doi = {10.1145/1706299.1706334},
  acmid = {1706334},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {abstract reduction systems, dependent types, singleton types,
    subtyping, transitivity elimination},
}

@article{ccs,
  title={A calculus of communicating systems},
  author={Milner, Robin},
  journal={LNCS},
  volume={92},
  year={1980},
  publisher={springer-Verlag}
}

%}}}

% Game semantics {{{

%% Introductory material {{{

@incollection{cspgs,
  author="Abramsky, Samson",
  editor="Roscoe, A.W. and Jones, Cliff B. and Wood, Kenneth R.",
  title="From {CSP} to Game Semantics",
  booktitle="Reflections on the Work of C.A.R. Hoare",
  year="2010",
  publisher="Springer London",
  address="London",
  pages="33--45",
  abstract="In this short essay, we describe in informal terms how game
  semantics can be seen to arise as a perturbation of process calculi such
  as CSP, by making an explicit distinction between the r{\^o}les of the
  System and the Environment. Drawing out the consequences of this
  distinction uncovers a wealth of mathematical structure, with Game
  intuitions entering in a natural and compelling fashion. This leads
  ultimately to the elaboration of mathematically well-structured and
  behaviourally expressive semantic universes for computation. These
  provide a basis for fully abstract models of a wide range of programming
  languages, and lead on to algorithmic methods, with applications to
  compositional model-checking and program analysis.",
  isbn="978-1-84882-912-1",
  doi="10.1007/978-1-84882-912-1_2",
  url="https://doi.org/10.1007/978-1-84882-912-1_2"
}

@incollection{rosetta,
  title={Physics, topology, logic and computation: a {R}osetta {S}tone},
  author={Baez, John and Stay, Mike},
  booktitle={New structures for physics},
  pages={95--172},
  year={2010},
  publisher={Springer}
}

@inproceedings{gamesem99,
  title={Game semantics},
  author={Abramsky, Samson and McCusker, Guy},
  booktitle={Computational logic: Proceedings of the 1997 Marktoberdorf Summer School},
  pages={1--56},
  year={1999},
  organization={Springer}
}

@article{pcfajm,
  title={Full abstraction for PCF},
  author={Abramsky, Samson and Jagadeesan, Radha and Malacaria, Pasquale},
  journal={Information and computation},
  volume={163},
  number={2},
  pages={409--470},
  year={2000},
  publisher={Elsevier}
}

@article{pcfho,
  title={On full abstraction for PCF: I, II, and III},
  author={Hyland, J Martin E and Ong, C-HL},
  journal={Information and computation},
  volume={163},
  number={2},
  pages={285--408},
  year={2000},
  publisher={Elsevier}
}

@article{gsll,
  title={A game semantics for linear logic},
  author={Blass, Andreas},
  journal={Annals of Pure and Applied logic},
  volume={56},
  number={1-3},
  pages={183--220},
  year={1992},
  publisher={Elsevier}
}

@article{gsllaj,
  title={Games and full completeness for multiplicative linear logic},
  author={Abramsky, Samson and Jagadeesan, Radha},
  journal={The Journal of Symbolic Logic},
  volume={59},
  number={2},
  pages={543--574},
  year={1994},
  publisher={Cambridge University Press}
}

%}}}

%% Nondeterminism {{{

@inproceedings{gsfnd,
  title={A fully abstract game semantics for finite nondeterminism},
  author={Harmer, Russell and McCusker, Guy},
  booktitle={Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158)},
  pages={422--430},
  year={1999},
  organization={IEEE}
}

@inproceedings{gscnd,
  author = {W. John Gowers and James D. Laird},
  title = {A Fully Abstract Game Semantics for Countable Nondeterminism},
  booktitle = {27th EACSL Annual Conference on Computer Science Logic (CSL 2018)},
  pages = {24:1--24:18},
  series = {Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN = {978-3-95977-088-0},
  ISSN = {1868-8969},
  year = {2018},
  volume = {119},
  editor = {Dan Ghica and Achim Jung},
  publisher = {Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address = {Dagstuhl, Germany},
  URL =	{http://drops.dagstuhl.de/opus/volltexte/2018/9691},
  URN =	{urn:nbn:de:0030-drops-96918},
  doi =	{10.4230/LIPIcs.CSL.2018.24},
  annote = {Keywords: semantics, nondeterminism, games and logic}
}

@inproceedings{gsndsheaves,
  title={Nondeterminism in game semantics via sheaves},
  author={Tsukada, Takeshi and Ong, CH Luke},
  booktitle={2015 30th Annual ACM/IEEE Symposium on Logic in Computer
Science},
  pages={220--231},
  year={2015},
  organization={IEEE}
}

@inproceedings{gseia,
  author={A. S. {Murawski}},
  booktitle={2008 23rd Annual IEEE Symposium on Logic in Computer Science},
  title={Reachability Games and Game Semantics: Comparing Nondeterministic Programs},
  year={2008},
  volume={},
  number={},
  pages={353-363}
}

@inproceedings{nacgs,
  title={Non-angelic concurrent game semantics},
  author={Castellan, Simon and Clairambault, Pierre and Hayman, Jonathan
    and Winskel, Glynn},
  booktitle={International Conference on Foundations of Software Science
    and Computation Structures},
  pages={3--19},
  year={2018},
  organization={Springer, Cham}
}

%}}}

%% Concurrency {{{

@InProceedings{agames,
author="Melli{\`e}s, Paul-Andr{\'e}
and Mimram, Samuel",
editor="Caires, Lu{\'i}s
and Vasconcelos, Vasco T.",
title="Asynchronous Games: Innocence Without Alternation",
booktitle="CONCUR 2007 -- Concurrency Theory",
year="2007",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="395--411",
abstract="The notion of innocent strategy was introduced by Hyland and
Ong in order to capture the interactive behaviour of $\lambda$-terms and
PCF programs. An innocent strategy is defined as an alternating strategy
with partial memory, in which the strategy plays according to its view.
Extending the definition to non-alternating strategies is problematic,
because the traditional definition of views is based on the hypothesis
that Opponent and Proponent alternate during the interaction. Here, we
take advantage of the diagrammatic reformulation of alternating
innocence in asynchronous games, in order to provide a tentative
definition of innocence in non-alternating games. The task is
interesting, and far from easy. It requires the combination of true
concurrency and game semantics in a clean and organic way, clarifying
the relationship between asynchronous games and concurrent games in the
sense of Abramsky and Melli{\`e}s. It also requires an interactive
reformulation of the usual acyclicity criterion of linear logic, as well
as a directed variant, as a scheduling criterion.",
isbn="978-3-540-74407-8"
}

@InProceedings{asfgc,
author="Ghica, Dan R.
and Murawski, Andrzej S.",
editor="Walukiewicz, Igor",
title="Angelic Semantics of Fine-Grained Concurrency",
booktitle="Foundations of Software Science and Computation Structures",
year="2004",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="211--225",
abstract="We introduce a game model for a procedural programming
language extended with primitives for parallel composition and
synchronization on binary semaphores. The model uses an interleaved
version of Hyland-Ong-style games, where most of the original
combinatorial constraints on positions are replaced with a simple
principle naturally related to static process creation. The model is
fully abstract for may-equivalence.",
isbn="978-3-540-24727-2"
}

@INPROCEEDINGS{cgames,
  author={S. {Abramsky} and P. -. {Mellies}},
  booktitle={Proceedings. 14th Symposium on Logic in Computer Science
    (Cat. No. PR00158)},
  title={Concurrent games and full completeness},
  year={1999},
  volume={},
  number={},
  pages={431-442},
}

%% }}}

%% Various things {{{

@incollection{gsia,
  title={Linearity, sharing and state: a fully abstract game semantics for
    Idealized Algol with active expressions},
  author={Abramsky, Samson and McCusker, Guy},
  booktitle={Algol-like languages},
  pages={297--329},
  year={1997},
  publisher={Springer}
}

@inproceedings{gscontrol,
  title={Full abstraction for functional languages with control},
  author={Laird, James},
  booktitle={Proceedings of Twelfth Annual IEEE Symposium on
    Logic in Computer Science},
  pages={58--67},
  year={1997},
  organization={IEEE}
}

@inproceedings{gsconcur,
  title={Angelic semantics of fine-grained concurrency},
  author={Ghica, Dan R and Murawski, Andrzej S},
  booktitle={International Conference on
    Foundations of Software Science and Computation Structures},
  pages={211--225},
  year={2004},
  organization={Springer}
}

@inproceedings{gsgr,
  author = {Samson Abramsky and Kohei Honda and Guy Mccusker},
  title = {A Fully Abstract Game Semantics for General References},
  booktitle = {Proceedings of the Thirteenth Annual IEEE Symposium on
    Logic in Computer Science},
  year = {1998},
  pages = {334--344},
  publisher = {Society Press}
}

@article{mwjava,
  title={Game semantics for interface middleweight {J}ava},
  author={Murawski, Andrzej S and Tzevelekos, Nikos},
  booktitle={ACM SIGPLAN Notices},
  volume={49},
  number={1},
  pages={517--528},
  year={2014},
  publisher={ACM}
}

%}}}

%% Refinement {{{

@article{atl,
  title={Alternating-time temporal logic},
  author={Alur, Rajeev and Henzinger, Thomas A and Kupferman, Orna},
  journal={Journal of the ACM (JACM)},
  volume={49},
  number={5},
  pages={672--713},
  year={2002},
  publisher={ACM}
}

@inproceedings{altref,
  author="Alur, Rajeev
  and Henzinger, Thomas A.
  and Kupferman, Orna
  and Vardi, Moshe Y.",
  editor="Sangiorgi, Davide and de Simone, Robert",
  title="Alternating refinement relations",
  booktitle="CONCUR'98 Concurrency Theory",
  year="1998",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="163--178",
  abstract="Alternating transition systems are a general model for
  composite systems which allow the study of collaborative as well as
  adversarial relationships between individual system components. Unlike
  in labeled transition systems, where each transition corresponds to a
  possible step of the system (which may involve some or all
  components), in alternating transition systems, each transition
  corresponds to a possible move in a game between the components. In
  this paper, we study refinement relations between alternating
  transition systems, such as ``Does the implementation refine the set A
  of specification components without constraining the components not in
  A?'' In particular, we generalize the definitions of the simulation
  and trace containment preorders from labeled transition systems to
  alternating transition systems. The generalizations are called
  alternating simulation and alternating trace containment. Unlike
  existing refinement relations, they allow the refinement of individual
  components within the context of a composite system description. We
  show that, like ordinary simulation, alternating simulation can be
  checked in polynomial time using a fixpoint computation algorithm.
  While ordinary trace containment is PSPACE-complete, we establish
  alternating trace containment to be EXPTIME-complete. Finally, we
  present logical characterizations for the two preorders in terms of
  ATL, a temporal logic capable of referring to games between system
  components.",
  isbn="978-3-540-68455-8"
}

%%}}}

%}}}

% Dual nondeterminism {{{

%% Hoare logic etc {{{

@incollection{gc,
  title={Guarded commands, nondeterminacy, and formal derivation of programs},
  author={Dijkstra, Edsger W},
  booktitle={Programming Methodology},
  pages={166--175},
  year={1978},
  publisher={Springer}
}

@article{specstm,
  title={The specification statement},
  author={Morgan, Carroll},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={10},
  number={3},
  pages={403--419},
  year={1988},
  publisher={ACM New York, NY, USA}
}

$}}}

%% Refinement calculus {{{

@phdthesis{backthesis,
  author="Back, Ralph-Johan",
  title="On the correctness of refinement steps in program development",
  year="1978",
  school="Department of Computer Science, University of Helsinky",
  address="Helsinki, Finland"
}

@book{refcal,
  author="Back, Ralph-Johan and Wright, Joakim von",
  title="Refinement Calculus: A Systematic Introduction",
  publisher="Springer-Verlag",
  address="New York",
  year="1998",
}

@article{refcalgames,
  title={Contracts, games, and refinement},
  author={Back, Ralph-Johan and von Wright, Joakim},
  journal={Information and Computation},
  volume={156},
  number={1-2},
  pages={25--45},
  year={2000},
  publisher={Elsevier}
}

@incollection{multirel,
  title={Binary multirelations},
  author={Rewitzky, Ingrid},
  booktitle={Theory and Applications of Relational Structures as
    Knowledge Instruments},
  pages={256--271},
  year={2003},
  publisher={Springer}
}

@article{mrdnd,
title = "Modelling angelic and demonic nondeterminism with
multirelations",
journal = "Science of Computer Programming",
volume = "65",
number = "2",
pages = "140 - 158",
year = "2007",
note = "Special Issue dedicated to selected papers from the conference
of program construction 2004 (MPC 2004)",
issn = "0167-6423",
doi = "https://doi.org/10.1016/j.scico.2006.01.007",
url =
"http://www.sciencedirect.com/science/article/pii/S0167642306002115",
author = "C.E. Martin and S.A. Curtis and I. Rewitzky",
keywords = "Multirelation, Predicate transformer, Agent, Strongest
postcondition, Angelic nondeterminism, Demonic nondeterminism, Resource
sharing",
abstract = "This paper presents an introduction to a calculus of binary
multirelations, which can model both angelic and demonic kinds of
non-determinism. The isomorphism between up-closed multirelations and
monotonic predicate transformers allows a different view of program
transformation, and program transformation calculations using
multirelations are easier to perform in some circumstances.
Multirelations are illustrated by modelling both kinds of
nondeterministic behaviour in games and resource-sharing protocols."
}

%}}}

%% Morris and Tyrrell {{{

@inproceedings{augtyp,
  author="Morris, Joseph M.",
  editor="Kozen, Dexter",
  title="Augmenting Types with Unbounded Demonic and Angelic Nondeterminacy",
  booktitle="Mathematics of Program Construction",
  year="2004",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="274--288",
  abstract="We show how to introduce demonic and angelic nondeterminacy
    into the term language of each type in typical programming or
    specification language. For each type we introduce (binary infix)
    operators ⊓ and ⊔ on terms of the type, corresponding to demonic and
    angelic nondeterminacy, respectively. We generalise these operators to
    accommodate unbounded nondeterminacy. We axiomatise the operators and
    derive their important properties. We show that a suitable model for
    nondeterminacy is the free completely distributive complete lattice over
    a poset, and we use this to show that our axiomatisation is sound. In
    the process, we exhibit a strong relationship between nondeterminacy and
    free lattices that has not hitherto been evident. Although
    nondeterminacy arises naturally in specification and programming
    languages, we speculate that it combines fruitfully with function theory
    to the extent that it can play an important role in facilitating proofs
    of programs that have no apparent connection with nondeterminacy.",
  isbn="978-3-540-27764-4"
}

@inproceedings{cspdnd,
  author="Tyrrell, Malcolm
    and Morris, Joseph M.
    and Butterfield, Andrew
    and Hughes, Arthur",
  editor="Barkaoui, Kamel
    and Cavalcanti, Ana
    and Cerone, Antonio",
  title="A Lattice-Theoretic Model for an Algebra of
    Communicating Sequential Processes",
  booktitle="Theoretical Aspects of Computing - ICTAC 2006",
  year="2006",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="123--137",
  abstract="We present a new lattice-theoretic model for communicating
    sequential processes. The model underpins a process algebra that is very
    close to CSP. It differs from CSP ``at the edges'' for the purposes of
    creating an elegant algebra of communicating processes. The one
    significant difference is that we postulate additional distributive
    properties for external choice. The shape of the algebra that emerges
    suggests a lattice-theoretic model, in contrast to traditional
    trace-theoretic models. We show how to build the new model in a
    mathematically clean step-by-step process. The essence of our approach
    is to model simple processes (i.e. those without choice, parallelism, or
    recursion) as a poset S of sequences, and then order-embed S into a
    complete (and completely distributive) lattice called the free
    completely distributive lattice over S. We explain the technique in
    detail and show that the resulting model does indeed capture our algebra
    of communicating sequential processes. The focus of the paper is not on
    the algebra per se, but on the model and the soundness of the algebra.",
  isbn="978-3-540-48816-3"
}

@article{dndf,
  title={Dually nondeterministic functions},
  author={Morris, Joseph M and Tyrrell, Malcolm},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={30},
  number={6},
  pages={34},
  year={2008},
  publisher={ACM}
}

%}}}

%% Interface automata {{{

@article{ia,
  title={Interface automata},
  author={De Alfaro, Luca and Henzinger, Thomas A},
  journal={ACM SIGSOFT Software Engineering Notes},
  volume={26},
  number={5},
  pages={109--120},
  year={2001},
  organization={ACM}
}

@inproceedings{itcd,
  title={Interface theories for component-based design},
  author={De Alfaro, Luca and Henzinger, Thomas A},
  booktitle={International Workshop on Embedded Software},
  pages={148--165},
  year={2001},
  organization={Springer}
}

@inproceedings{gmos,
  author = {Luca De Alfaro},
  title = {Game models for open systems},
  booktitle = {Theory and Practice: Essays Dedicated to Zohar Manna
    on the Occasion of His 64th Birthday, volume 2772 of LNCS},
  year = {2004},
  pages = {269--289},
  publisher = {Springer}
}

@article{gtf,
  title={Interfaces: A game-theoretic framework for
    reasoning about component-based systems},
  author={de Alfaro, Luca and Stoelinga, Mari{\"e}lle},
  journal={Electronic Notes in Theoretical Computer Science},
  volume={97},
  pages={3--23},
  year={2004},
  publisher={Elsevier}
}

%%}}}

@article{hyperprop,
  title={Hyperproperties},
  author={Clarkson, Michael R and Schneider, Fred B},
  journal={Journal of Computer Security},
  volume={18},
  number={6},
  pages={1157--1210},
  year={2010},
  publisher={IOS Press}
}

%}}}

% Compcert and the like {{{

%% CompCert {{{

@article{compcert,
 author = {Leroy, Xavier},
 title = {Formal Verification of a Realistic Compiler},
 journal = {Commun. ACM},
 issue_date = {July 2009},
 volume = {52},
 number = {7},
 month = jul,
 year = {2009},
 issn = {0001-0782},
 pages = {107--115},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/1538788.1538814},
 doi = {10.1145/1538788.1538814},
 acmid = {1538814},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{coindbs,
  author="Leroy, Xavier",
  editor="Sestoft, Peter",
  title="Coinductive Big-Step Operational Semantics",
  booktitle="Programming Languages and Systems",
  year="2006",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="54--68",
  abstract="This paper illustrates the use of coinductive definitions
    and proofs in big-step operational semantics, enabling the latter to
    describe diverging evaluations in addition to terminating
    evaluations. We show applications to proofs of type soundness and to
    proofs of semantic preservation for compilers.",
  isbn="978-3-540-33096-7"
}

@article{compcertmm,
  title={Formal verification of a {C}-like memory model and its uses for
    verifying program transformations},
  author={Leroy, Xavier and Blazy, Sandrine},
  journal={Journal of Automated Reasoning},
  volume={41},
  number={1},
  pages={1--31},
  year={2008},
  publisher={Springer}
}

@techreport{compcertmmv2,
  author = {Xavier Leroy and Andrew W. Appel and Sandrine Blazy and Gordon Stewart},
  title = {The {CompCert} Memory Model, Version 2},
  institution = {INRIA},
  type = {Research report},
  number = {RR-7987},
  year = {2012},
  month = jun,
  url = {http://hal.inria.fr/hal-00703441},
  xtopic = {compcert},
  abstract = {A memory model is an important component of the formal
    semantics of imperative programming languages: it specifies the
    behavior of operations over memory states, such as reads and writes.
    The formally verified CompCert C compiler uses a sophisticated
    memory model that is shared between the semantics of its source
    language (the CompCert subset of C) and intermediate languages. The
    algebraic properties of this memory model play an important role in
    the proofs of semantic preservation for the compiler. The initial
    design of the CompCert memory model is described in an article by
    Leroy and Blazy (J. Autom. Reasoning 2008). The present research
    report describes version 2 of this memory model, improving over the
    main limitations of version 1. The first improvement is to expose
    the byte-level, in-memory representation of integers and floats,
    while preserving desirable opaqueness properties of pointer values.
    The second improvement is the integration of a fine-grained
    mechanism of permissions (access rights), which supports more
    aggressive optimizations over read-only data, and paves the way
    towards shared-memory, data-race-free concurrency in the style of
    Appel's Verified Software Toolchain project.}
}

@inproceedings{compsem,
  title={Mechanized semantics for compiler verification},
  author={Leroy, Xavier},
  booktitle={Asian Symposium on Programming Languages and Systems},
  pages={386--388},
  year={2012},
  organization={Springer}
}

@inproceedings{compcompcert,
  author = {Stewart, Gordon and Beringer, Lennart and Cuellar, Santiago and
    Appel, Andrew W.},
  title = {Compositional {CompCert}},
  booktitle = {Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT
    Symposium on Principles of Programming Languages},
  series = {POPL '15},
  year = {2015},
  isbn = {978-1-4503-3300-9},
  location = {Mumbai, India},
  pages = {275--287},
  numpages = {13},
  url = {http://doi.acm.org/10.1145/2676726.2676985},
  doi = {10.1145/2676726.2676985},
  acmid = {2676985},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {compcert, compiler correctness},
}

@inproceedings{qompcert,
  author = {Carbonneaux, Quentin and Hoffmann, Jan and
    Ramananandro, Tahina and Shao, Zhong},
  title = {End-to-end Verification of Stack-space Bounds for {C} Programs},
  booktitle = {Proceedings of the 35th ACM SIGPLAN Conference on
    Programming Language Design and Implementation},
  series = {PLDI '14},
  year = {2014},
  isbn = {978-1-4503-2784-8},
  location = {Edinburgh, United Kingdom},
  pages = {270--281},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/2594291.2594301},
  doi = {10.1145/2594291.2594301},
  acmid = {2594301},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {compiler construction, formal verification, program logics,
    quantitative verification, stack-space bounds},
}

@article{compcerttso,
  author = {\v{S}ev\v{c}\'{\i}k, Jaroslav and Vafeiadis, Viktor and
    Zappa Nardelli, Francesco and Jagannathan, Suresh and Sewell, Peter},
  title = {{CompCertTSO}: A Verified Compiler for Relaxed-Memory Concurrency},
  journal = {J. ACM},
  issue_date = {June 2013},
  volume = {60},
  number = {3},
  month = jun,
  year = {2013},
  issn = {0004-5411},
  pages = {22:1--22:50},
  articleno = {22},
  numpages = {50},
  url = {http://doi.acm.org/10.1145/2487241.2487248},
  doi = {10.1145/2487241.2487248},
  acmid = {2487248},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {Relaxed memory models, semantics, verified compilation},
}

@inproceedings{compcertshm,
  title={Verified Compilation for Shared-Memory {C}},
  author={Beringer, Lennart and Stewart, Gordon and Dockins, Robert and Appel, Andrew W},
  booktitle={ESOP'14},
  pages={107--127},
  year={2014}
}

@inproceedings{sepcompcert,
  author = {Kang, Jeehoon and Kim, Yoonseung and Hur, Chung-Kil and
    Dreyer, Derek and Vafeiadis, Viktor},
  title = {Lightweight Verification of Separate Compilation},
  booktitle = {Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on
    Principles of Programming Languages},
  series = {POPL'16},
  year = {2016},
  isbn = {978-1-4503-3549-2},
  location = {St. Petersburg, FL, USA},
  pages = {178--190},
  numpages = {13},
  url = {http://doi.acm.org/10.1145/2837614.2837642},
  doi = {10.1145/2837614.2837642},
  acmid = {2837642},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {CompCert, Compositional compiler verification, separate compilation},
}

@inproceedings{cpp15,
  author = {Ramananandro, Tahina and Shao, Zhong and Weng, Shu-Chun and
    Koenig, J{\'e}r{\'e}mie and Fu, Yuchen},
  title = {A Compositional Semantics for Verified Separate Compilation and Linking},
  booktitle = {Proceedings of the 2015 Conference on Certified Programs and Proofs},
  series = {CPP '15},
  year = {2015},
  isbn = {978-1-4503-3296-5},
  location = {Mumbai, India},
  pages = {3--14},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/2676724.2693167},
  doi = {10.1145/2676724.2693167},
  acmid = {2693167},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {compositional semantics, horizontal composition,
    verified compilation and linking, vertical composition},
}

@article{compcertm,
  title={{CompCertM}: {CompCert} with Lightweight Modular Verification
    and Multi-Language Linking},
  author={Song, Youngju and Cho, Minko and Kim, Dongjoo
    and Kim, Yonghyun and Kang, Jeehoon and Hur, Chung-Kil}
}

@misc{compcerto,
  title = {Refinement-based game semantics for {CompCert}},
  note = {Submitted},
}

%%}}}

%% Tools {{{

@inproceedings{vst,
 author = {Appel, Andrew W.},
 title = {Verified Software Toolchain},
 booktitle = {Proceedings of the 20th European Conference on Programming Languages and Systems: Part of the Joint European Conferences on Theory and Practice of Software},
 series = {ESOP'11/ETAPS'11},
 year = {2011},
 isbn = {978-3-642-19717-8},
 location = {Saarbr\&\#252;cken, Germany},
 pages = {1--17},
 numpages = {17},
 url = {http://dl.acm.org/citation.cfm?id=1987211.1987212},
 acmid = {1987212},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
}

@phdthesis{verasco,
  title={Verasco: a formally verified C static analyzer},
  author={Jourdan, Jacques-Henri},
  year={2016}
}

@inproceedings{csmith,
  author = {Yang, Xuejun and Chen, Yang and Eide, Eric and Regehr, John},
  title = {Finding and Understanding Bugs in C Compilers},
  booktitle = {Proceedings of the 32Nd ACM SIGPLAN Conference on
    Programming Language Design and Implementation},
  series = {PLDI '11},
  year = {2011},
  isbn = {978-1-4503-0663-8},
  location = {San Jose, California, USA},
  pages = {283--294},
  numpages = {12},
  url = {http://doi.acm.org/10.1145/1993498.1993532},
  doi = {10.1145/1993498.1993532},
  acmid = {1993532},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {automated testing, compiler defect, compiler testing,
    random program generation, random testing},
}

%%}}}

%% Compositional Compilation {{{

@inproceedings{pilsner,
  author = {Neis, Georg and Hur, Chung-Kil and Kaiser, Jan-Oliver and
    McLaughlin, Craig and Dreyer, Derek and Vafeiadis, Viktor},
  title = {Pilsner: A Compositionally Verified Compiler for a
    Higher-order Imperative Language},
  booktitle = {Proceedings of the 20th ACM SIGPLAN International
    Conference on Functional Programming},
  series = {ICFP 2015},
  year = {2015},
  isbn = {978-1-4503-3669-7},
  location = {Vancouver, BC, Canada},
  pages = {166--178},
  numpages = {13},
  url = {http://doi.acm.org/10.1145/2784731.2784764},
  doi = {10.1145/2784731.2784764},
  acmid = {2784764},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {Compositional compiler verification, abstract types,
    higher-order state, parametric simulations, recursive types,
    transitivity},
}

@article{next700,
  author = {Patterson, Daniel and Ahmed, Amal},
  title = {The Next 700 Compiler Correctness Theorems (Functional Pearl)},
  journal = {Proc. ACM Program. Lang.},
  issue_date = {August 2019},
  volume = {3},
  number = {ICFP},
  month = jul,
  year = {2019},
  issn = {2475-1421},
  pages = {85:1--85:29},
  articleno = {85},
  numpages = {29},
  url = {http://doi.acm.org/10.1145/3341689},
  doi = {10.1145/3341689},
  acmid = {3341689},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {compilers, verification},
}

%}}}

%}}}

% Verification projects {{{

%% DeepSpec {{{

@article{deepspec,
  title={Position paper: the science of deep specification},
  author={Appel, Andrew W and Beringer, Lennart and Chlipala, Adam and Pierce,
Benjamin C and Shao, Zhong and Weirich, Stephanie and Zdancewic, Steve},
  journal={Philosophical Transactions of the Royal Society A: Mathematical,
Physical and Engineering Sciences},
  volume={375},
  number={2104},
  pages={20160331},
  year={2017},
  publisher={The Royal Society Publishing}
}

@article{itree,
  title={Interaction trees: representing recursive and impure programs in Coq},
  author={Xia, Li-yao and Zakowski, Yannick and He, Paul and
    Hur, Chung-Kil and Malecha, Gregory and Pierce, Benjamin C and
    Zdancewic, Steve},
  journal={Proceedings of the ACM on Programming Languages},
  volume={4},
  number={POPL},
  pages={1--32},
  year={2019},
  publisher={ACM New York, NY, USA}
}

@inproceedings{itrees,
  title={From C to interaction trees:
    specifying, verifying, and testing a networked server},
  author={Koh, Nicolas and Li, Yao and Li, Yishuai and Xia, Li-yao and
    Beringer, Lennart and Honor{\'e}, Wolf and Mansky, William and
    Pierce, Benjamin C and Zdancewic, Steve},
  booktitle={Proceedings of the 8th ACM SIGPLAN International Conference on
    Certified Programs and Proofs},
  pages={234--248},
  year={2019},
  organization={ACM}
}

%%}}}

%% CertiKOS {{{

@inproceedings{popl15,
 author = {Gu, Ronghui and Koenig, J{\'e}r{\'e}mie and Ramananandro, Tahina and
   Shao, Zhong and Wu, Xiongnan (Newman) and Weng, Shu-Chun and Zhang, Haozhong and
   Guo, Yu},
 title = {Deep Specifications and Certified Abstraction Layers},
 booktitle = {Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT
   Symposium on Principles of Programming Languages},
 series = {POPL '15},
 year = {2015},
 isbn = {978-1-4503-3300-9},
 location = {Mumbai, India},
 pages = {595--608},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/2676726.2676975},
 doi = {10.1145/2676726.2676975},
 acmid = {2676975},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {abstraction layer, certified compilers, certified os kernels,
   deep specification, modularity, program verification},
}

@inproceedings{ccal,
  title={Certified concurrent abstraction layers},
  author={Gu, Ronghui and Shao, Zhong and Kim, Jieung and
    Wu, Xiongnan Newman and Koenig, J{\'e}r{\'e}mie and
    Sj{\"o}berg, Vilhelm and Chen, Hao and Costanzo, David and
    Ramananandro, Tahina},
  booktitle={Proceedings of the 39th ACM SIGPLAN Conference on
    Programming Language Design and Implementation},
  series = {PLDI '18},
  pages={646--661},
  year={2018},
  organization={ACM}
}

@inproceedings{osdi16,
 author = {Gu, Ronghui and Shao, Zhong and Chen, Hao and Wu, Xiongnan and
   Kim, Jieung and Sj\"{o}berg, Vilhelm and Costanzo, David},
 title = {CertiKOS: An Extensible Architecture for Building Certified
   Concurrent OS Kernels},
 booktitle = {Proceedings of the 12th USENIX Conference on
   Operating Systems Design and Implementation},
 series = {OSDI'16},
 year = {2016},
 isbn = {978-1-931971-33-1},
 location = {Savannah, GA, USA},
 pages = {653--669},
 numpages = {17},
 url = {http://dl.acm.org/citation.cfm?id=3026877.3026928},
 acmid = {3026928},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
}

%%}}}

%% Other system stuff {{{

@inproceedings{fscq,
  title={Using Crash {H}oare logic for certifying the {FSCQ} file system},
  author={Chen, Haogang and Ziegler, Daniel and Chajed, Tej and Chlipala, Adam
and Kaashoek, M Frans and Zeldovich, Nickolai},
  booktitle={Proceedings of the 25th Symposium on Operating Systems
Principles},
  pages={18--37},
  year={2015},
  organization={ACM}
}

@inproceedings{safe,
  title={A verified information-flow architecture},
  author={Azevedo de Amorim, Arthur and Collins, Nathan and
    DeHon, Andr{\'e} and Demange, Delphine and
      Hri{\c{t}}cu, C{\u{a}}t{\u{a}}lin and Pichardie, David and
      Pierce, Benjamin C and Pollack, Randy and Tolmach, Andrew},
  booktitle={ACM SIGPLAN Notices},
  volume={49},
  number={1},
  pages={165--178},
  year={2014},
  organization={ACM}
}

@inproceedings{vellvm,
  title={Formalizing the LLVM intermediate representation for
    verified program transformations},
  author={Zhao, Jianzhou and Nagarakatte, Santosh and Martin, Milo MK and
    Zdancewic, Steve},
  booktitle={Acm sigplan notices},
  volume={47},
  number={1},
  pages={427--440},
  year={2012},
  organization={ACM}
}

@inproceedings{sel4,
  title={{seL4}: Formal verification of an {OS} kernel},
  author={Klein, Gerwin and Elphinstone, Kevin and Heiser, Gernot and
Andronick, June and Cock, David and Derrin, Philip and Elkaduwe, Dhammika and
Engelhardt, Kai and Kolanski, Rafal and Norrish, Michael and others},
  booktitle={Proceedings of the ACM SIGOPS 22nd symposium on Operating systems
principles},
  pages={207--220},
  year={2009},
  organization={ACM}
}

%%}}}

%}}}

% Logical relations {{{

@article{lrp,
 author = {Hermida, Claudio and Reddy, Uday S. and Robinson, Edmund P.},
 title = {Logical Relations and Parametricity - A {R}eynolds Programme for Category Theory and Programming Languages},
 journal = {Electron. Notes Theor. Comput. Sci.},
 issue_date = {March, 2014},
 volume = {303},
 month = mar,
 year = {2014},
 issn = {1571-0661},
 pages = {149--180},
 numpages = {32},
 url = {http://dx.doi.org/10.1016/j.entcs.2014.02.008},
 doi = {10.1016/j.entcs.2014.02.008},
 acmid = {2599154},
 publisher = {Elsevier Science Publishers B. V.},
 address = {Amsterdam, The Netherlands, The Netherlands},
 keywords = {Category Theory, Data abstraction, Definability, Fibrations, Homomorphisms, Information hiding, Logical Relations, Natural Transformations, Parametric polymorphism, Reflexive Graphs, Relation lifting, Relational Parametricity, Universal algebra},
}

%}}}

% Algebraic effects {{{

@InProceedings{effadq,
  author="Plotkin, Gordon
    and Power, John",
  editor="Honsell, Furio
    and Miculan, Marino",
  title="Adequacy for Algebraic Effects",
  booktitle="Foundations of Software Science and Computation Structures",
  year="2001",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="1--24",
  abstract="Moggi proposed a monadic account of computational effects. He
    also presented the computational $\lambda$-calculus, $\lambda$c, a core
    call-by-value functional programming language for effects; the effects
    are obtained by adding appropriate operations. The question arises as to
    whether one can give a corresponding treatment of operational semantics.
    We do this in the case of algebraic effects where the operations are
    given by a single-sorted algebraic signature, and their semantics is
    supported by the monad, in a certain sense. We consider call-by-value
    PCF with--- and without---recursion, an extension of $\lambda$cwith
    arithmetic. We prove general adequacy theorems, and illustrate these
    with two examples: non-determinism and probabilistic nondeterminism.",
  isbn="978-3-540-45315-4"
}

@inproceedings{eff,
  title={Handlers of algebraic effects},
  author={Plotkin, Gordon and Pretnar, Matija},
  booktitle={European Symposium on Programming},
  pages={80--94},
  year={2009},
  organization={Springer}
}

% }}}

@InProceedings{bltsp,
  author="Nain, Sumit
    and Vardi, Moshe Y.",
  editor="Namjoshi, Kedar S.
    and Yoneda, Tomohiro
    and Higashino, Teruo
    and Okamura, Yoshio",
  title="Branching vs. Linear Time: Semantical Perspective",
  booktitle="Automated Technology for Verification and Analysis",
  year="2007",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="19--34",
  abstract="The discussion in the computer-science literature of the
    relative merits of linear- versus branching-time frameworks goes back to
    early 1980s. One of the beliefs dominating this discussion has been that
    the linear-time framework is not expressive enough semantically, making
    linear-time logics lacking in expressiveness. In this work we examine
    the branching-linear issue from the perspective of process equivalence,
    which is one of the most fundamental notions in concurrency theory,
    as defining a notion of process equivalence essentially amounts to
    defining semantics for processes. Over the last three decades numerous
    notions of process equivalence have been proposed. Researchers in
    this area do not anymore try to identify the ``right'' notion of
    equivalence. Rather, focus has shifted to providing taxonomic
    frameworks, such as ``the linear-branching spectrum'', for the many
    proposed notions and trying to determine suitability for different
    applications.",
  isbn="978-3-540-75596-8"
}

@inproceedings{tsfa,
  title={Trace semantics is fully abstract},
  author={Nain, Sumit and Vardi, Moshe Y},
  booktitle={2009 24th Annual IEEE Symposium on Logic In Computer Science},
  pages={59--68},
  year={2009},
  organization={IEEE}
}

@article{shao10,
author = "Zhong Shao",
title = "Certified Software",
journal = "Communications of the {ACM}",
year = 2010,
month ="December",
volume="53",
number="12",
pages="56-66"
}

@article{hoare69,
author = "C. A. R. Hoare",
title = "An Axiomatic Basis for Computer Programming",
journal = "Communications of the {ACM}",
volume= 12,
number= 10,
pages={576--580},
year = 1969,
month = oct,
}
